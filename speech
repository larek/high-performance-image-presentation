Speech

Slide 1
Здравствуйте, меня зовут Александр Тихонов. Я расскажу про высокопроизводительные изображения. Поговорим о кодировании, о декодировании, конвертировании и о работе браузера с картинками. Что мы можем написать на JS для работы с нашими картинками.

Slide 2
Не для кого не секрет, что картинки создают большой траффик и являются самым большим загружаемым ресурсом на сайте. Есть такой сайт http://httparchive.org/, который спонсируется довольно известными компаниями Google, Mazilla, O'Rielly Media. Сайт сохраняет информацию о загружаемых ресурсах, картиночках, js скриптах и хранит историю. Это большая база для анализа трендов изменения размеров страниц, количества запросов и технологий.

Проблема в том, что картинки и так занимают много места и создают большой траффик, так они еще и увеличиваются по размеру и вес страницы становится гораздо больше из года в год

И мне хочется разобраться какие происходят процессы в браузере при загрузке картинки, что вообще из себя представляют цифровае изображения.

====================
====================
Slide 3
Основные форматы изображений

Посмотрим основные форматы изображний для веба. Мы все прекрасно знаем для чего их лучше всего использовать. Вкратце пройдемся. 

Формат GIF (Graphics Interchange Format) - формат для обмена изображениями. популярный растровый формат графических изображений. Разработан в 1987 году. Долгое время GIF был одним из наиболее распространённых форматов в интернете. Мы привыкли использовать его если нам нужна анимация. 

Потом на смену ему пришел PNG (portable network graphics). PNG был создан как свободный формат для замены GIF, поэтому в Интернете появился рекурсивный акроним «PNG is Not GIF» Мы привыкли использовать его, если нам нужна прозрачность.

SVG
SVG (от англ. Scalable Vector Graphics — масштабируемая векторная графика). Если нам нужны векторные картинки

JPEG один из самых популярных растровых графических форматов для хранения фотографий. О нем я и буду рассказывать подробнее далее

Так же еще есть формат WEBP созданный гуглом в 2010 году, интересная история, но это отдельая тема для другого доклада. Формат поддерживается Safari и Firefox

FLIF - его вообще не существует, но он в разрабоке и я скажу о нем пару слов позже

Хотелось бы внимательнее рассмотреть формат JPEG, потому что он самымй популярный

===================
===================

Slide 4 
Подробнее о JPEG

Существует много разных видов JPEG, с сжатием без потерь и с сжатием с потерями. Я бы хотел остановиться на JPEG с поетрями качеста, потому что это и есть один из инструменов оптимизации изображений и чаще всего мы используем именно этот тип JPEG. 

Существует две разновидности схем сжатия JPEG - sequential или baseline JPEG и progressive JPEG
Показать что такое на видео, потом показать как это проверить identify, как сконвертировать и потом показать первый практический пример. 

Потом сделать такой переход. "Прогрессивные картинки декодируются дольше" поэтому это не панацея. Давайте посмотрим что происходит при декодировании и соответственно при кодировании. И переходим к рассказу о субдискретизации, показать картину и говорить про декодирование 4:2:0. Дальше перейти к decode(). Показать пример с анимацией, потом перейти к примеру со скроллом, если он работает вообще? )

Jpeg 2000? Jpeg XR?
Рассказать про JPEG, какие бывают jpeg и как они кодируют в YCbCr, про метаданые и про цветовую субдискретизацию, про baseline и progressive jpeg, показать практический пример, где мы разрезаем две картинки и прогрессивная картинка при 15% загрузки уже прорисовалась, но в плохом качестве. Рассказать про конвертеры imagemagick, gm, mozjpeg, quetzli, (imagemin?) показать identify -verbose и как мы можем проверить у нас правильная картинка или неправильная.


Подводка к progressive 

Есть две разновидности схем сжатия у JPEG
sequential или baseline JPEG
progressive JPEG
https://ru.wikipedia.org/wiki/JPEG#Разновидности_схем_сжатия_JPEG
========================
========================

Slide 5 
Baseline and Progressive
Можно дать ссылочку и сказать, что cloudinary написали прикольную статью, где говориться, что есть что-то среднее между jpeg  baseline b jpeg прогрессив. И они описывают как это можно сделать. Сказать, что progressive дольше декодируются и показать как
Показать видео и свой пример с загрузкой части картинок. На основе этого примера, я придумал написать такой скрипт, благодаря которму можно указать в img data-percent 70% и он загрузит только 70 процентов картинки. Правда сделает больше запросов к серверу: потому что надо сначала узнать размер этой картинки.
Эта идея получения разыных по размеру картинок приша из формата FLIF (это надо проверить)

Рассказывая о прогрессивных JPEG и показывая свой пример по скачиванию части картинки, я расскажу о формате FLIF, потому что там была идея скачивания части картинки 
Рассказывая о FLIF надо сказать что есть полифилы и прочая хрень 
что можно настроить Imge Magick соответствующем образом для FLIF
https://uprootlabs.github.io/poly-flif/

Сколько слоев в прогрессивном?

Показывая пример progressive response где картирночки загружаются одны на 100 процентов, а другая на 30%, то надо поставть скорость интернета 3g в devtools и можно увидеть разницу в скорости загрузки.

Чтобы вы не подумали, что это бред сумасшедвего, то я вспомню про формат FLIF о котором говори в самом начале

==========================
==========================


Рассказать про декодирование изображения в браузере. Показать в dev tools, рассказать, что изображение с 4:2:0 декодируется быстрее.

Как можно загружать картинки 
<img />
<picture />
<link rel='preloader' />

Рассказать про img.decode() показать пример с анимацией в браузере canary

Как лучше орагизовтаь lazyload c IntersectionObserve


libjpeg ? jpegtran ? jpegrescan?

про YCbCr прикольно вот тут https://cloudinary.com/blog/progressive_jpegs_and_green_martians
JPEG first converts RGB pixels to YCbCr pixels. Instead of having Red, Green and Blue channels, JPEG uses a luma (Y) channel and two chroma channels (Cb and Cr). Those channels are treated separately, because the human eye is more sensitive to distortion in luma (brightness) than it is to distortion in chroma (color). The chroma channels are optionally downsampled to half the original resolution; this is called chroma subsampling.

как установил mozjpeg 
поставил brew install jpeg-turbo ? не факт, что обязательно для mozjpeg, mozjpeg не ставится пока (https://github.com/imagemin/imagemin/issues/168)
короче, чтобы написать свой scan script надо че-то про jpegrescan или mozjpeg почитать

Надо описать проблему следующими словами
Я для начала объясню для чего я хочу углубиться в технические характеристики изображений. Давайте загрузим в браузер картинку и посмотрим в dev tools что происходит. Мы видим, что картиночка скачивается, и декодируется. Это можно посмотреть вот здесь и вот здесь. Так же для особо пытливых умов подскажу, что существует chrome://trace в котором вообще еще больше всякой отладочной информации. 

Рассказывая о инструментах кодировки imagemagick и так далее надо показать как это пишется на js на соответствующих npm пакетах

Рассказывая про LazyLoad нужно указать про следующий Javascript во первых грузить с помощью Intersection Observe, подключить тормозилку debounce или throttle, чтобы не грузить пролистанные вверх картинки 

Не забыть рассказать про то, что прогрессивный JPEG дает ощущение того, что мы получаем картинку очень быстро. perception performance или восприятие. Этого ощущения можно добиться и без прогрессивного jpeg, подгружая сразу две картиночки. Снала маленькую и размытую, а потом большую. Можно попробовать написать это все из одной картиночки Progressive или сказать, что лучше делать из двух, потому что маленькая baseline будет гроаздо меньше по размеру и декодироваться она будет быстрее.

Финал
Итак, перед нами очень большой инструментарий для того, чтобы повысить производительность изображений, уменьшить их размер и время загрузки, а следовательно и повысить производительность всего веб-приложения. 


Сначала рассказать какую-то теорию, а потом показывать примеры или все сразу? вперемешку
Обязательно узнай про кеширование XHR запросов